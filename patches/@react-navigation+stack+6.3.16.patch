diff --git a/node_modules/@react-navigation/stack/src/views/Stack/CardContainer.tsx b/node_modules/@react-navigation/stack/src/views/Stack/CardContainer.tsx
index 1e9ee0e..ec3cac9 100644
--- a/node_modules/@react-navigation/stack/src/views/Stack/CardContainer.tsx
+++ b/node_modules/@react-navigation/stack/src/views/Stack/CardContainer.tsx
@@ -105,14 +105,14 @@ function CardContainer({
   const handleOpen = () => {
     const { route } = scene.descriptor;
 
-    onTransitionEnd({ route }, false);
+    onTransitionEnd({ route }, false, scene.descriptor.navigation.getState());
     onOpenRoute({ route });
   };
 
   const handleClose = () => {
     const { route } = scene.descriptor;
 
-    onTransitionEnd({ route }, true);
+    onTransitionEnd({ route }, true, scene.descriptor.navigation.getState());
     onCloseRoute({ route });
   };
 
@@ -153,7 +153,11 @@ function CardContainer({
       onPageChangeCancel?.();
     }
 
-    onTransitionStart?.({ route }, closing);
+    onTransitionStart?.(
+      { route },
+      closing,
+      scene.descriptor.navigation.getState()
+    );
   };
 
   const insets = {
diff --git a/node_modules/@react-navigation/stack/src/views/Stack/StackView.tsx b/node_modules/@react-navigation/stack/src/views/Stack/StackView.tsx
index 6bbce10..86d7b98 100644
--- a/node_modules/@react-navigation/stack/src/views/Stack/StackView.tsx
+++ b/node_modules/@react-navigation/stack/src/views/Stack/StackView.tsx
@@ -375,23 +375,42 @@ export default class StackView extends React.Component<Props, State> {
 
   private handleTransitionStart = (
     { route }: { route: Route<string> },
-    closing: boolean
-  ) =>
+    closing: boolean,
+    state: StackNavigationState<ParamListBase>
+  ) => {
     this.props.navigation.emit({
       type: 'transitionStart',
       data: { closing },
       target: route.key,
     });
 
+    if (state?.index > 1) {
+      this.props.navigation.emit({
+        type: 'transitionStart',
+        data: { closing: !closing },
+        target: state.routes[state.index - 2].key,
+      });
+    }
+  };
+
   private handleTransitionEnd = (
     { route }: { route: Route<string> },
-    closing: boolean
-  ) =>
+    closing: boolean,
+    state: StackNavigationState<ParamListBase>
+  ) => {
     this.props.navigation.emit({
       type: 'transitionEnd',
       data: { closing },
       target: route.key,
     });
+    if (state?.index > 1) {
+      this.props.navigation.emit({
+        type: 'transitionEnd',
+        data: { closing: !closing },
+        target: state.routes[state.index - 2].key,
+      });
+    }
+  };
 
   private handleGestureStart = ({ route }: { route: Route<string> }) => {
     this.props.navigation.emit({
